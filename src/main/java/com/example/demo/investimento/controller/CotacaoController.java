package com.example.demo.investimento.controller;

import com.example.demo.investimento.dto.response.AtualizacaoPrecoResponseDTO;
import com.example.demo.investimento.dto.response.AtualizacaoTodosPrecoResponseDTO;
import com.example.demo.investimento.dto.response.CotacaoResponseDTO;
import com.example.demo.investimento.dto.response.ErrorResponseDTO;
import com.example.demo.investimento.service.CotacaoService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.time.LocalDateTime;

@Tag(name = "üìä Cota√ß√µes", description = "Sistema de cota√ß√µes e atualiza√ß√£o de pre√ßos dos investimentos")
@RestController
@RequestMapping("/cotacao")
public class CotacaoController {

    private final CotacaoService cotacaoService;

    public CotacaoController(CotacaoService cotacaoService) {
        this.cotacaoService = cotacaoService;
    }

    @Operation(summary = "Obter pre√ßo atual", 
               description = "Obt√©m o pre√ßo atual de mercado de um investimento espec√≠fico")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Pre√ßo obtido com sucesso",
            content = @Content(mediaType = "application/json",
            examples = @ExampleObject(value = "{\"investimentoId\": 1, \"precoAtual\": 102.50, \"timestamp\": \"2024-01-01T10:00:00\"}"))),
        @ApiResponse(responseCode = "400", description = "Erro ao obter pre√ßo",
            content = @Content(mediaType = "application/json",
            examples = @ExampleObject(value = "{\"erro\": \"Investimento n√£o encontrado\", \"timestamp\": \"2024-01-01T10:00:00\"}"))) 
    })
    @GetMapping("/{investimentoId}")
    @PreAuthorize("hasAuthority('ROLE_USER') or hasAuthority('ROLE_ADMIN')")
    public ResponseEntity<?> obterPrecoAtual(@PathVariable Long investimentoId) {
        try {
            BigDecimal precoAtual = cotacaoService.obterPrecoAtual(investimentoId);
            
            CotacaoResponseDTO response = new CotacaoResponseDTO(investimentoId, precoAtual, LocalDateTime.now());
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            ErrorResponseDTO errorResponse = new ErrorResponseDTO(e.getMessage(), LocalDateTime.now());
            
            return ResponseEntity.badRequest().body(errorResponse);
        }
    }

    @Operation(summary = "[ADMIN] Atualizar pre√ßo", 
               description = "For√ßa a atualiza√ß√£o do pre√ßo de mercado de um investimento espec√≠fico (apenas admin)")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Pre√ßo atualizado com sucesso",
            content = @Content(mediaType = "application/json",
            examples = @ExampleObject(value = "{\"mensagem\": \"Pre√ßo atualizado com sucesso\", \"investimentoId\": 1, \"novoPreco\": 105.75, \"timestamp\": \"2024-01-01T10:00:00\"}"))),
        @ApiResponse(responseCode = "400", description = "Erro na atualiza√ß√£o",
            content = @Content(mediaType = "application/json",
            examples = @ExampleObject(value = "{\"erro\": \"Falha ao conectar com API de mercado\", \"timestamp\": \"2024-01-01T10:00:00\"}"))) 
    })
    @PostMapping("/atualizar/{investimentoId}")
    @PreAuthorize("hasAuthority('ROLE_ADMIN')")
    public ResponseEntity<?> atualizarPreco(@PathVariable Long investimentoId) {
        try {
            cotacaoService.atualizarPrecoMercado(investimentoId);
            BigDecimal novoPreco = cotacaoService.obterPrecoAtual(investimentoId);
            
            AtualizacaoPrecoResponseDTO response = new AtualizacaoPrecoResponseDTO(
                "Pre√ßo atualizado com sucesso", investimentoId, novoPreco, LocalDateTime.now());
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            ErrorResponseDTO errorResponse = new ErrorResponseDTO(e.getMessage(), LocalDateTime.now());
            
            return ResponseEntity.badRequest().body(errorResponse);
        }
    }

    @Operation(summary = "[ADMIN] Atualizar todos os pre√ßos", 
               description = "For√ßa a atualiza√ß√£o de pre√ßos de mercado de todos os investimentos (apenas admin)")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Todos os pre√ßos atualizados",
            content = @Content(mediaType = "application/json",
            examples = @ExampleObject(value = "{\"mensagem\": \"Todos os pre√ßos foram atualizados\", \"timestamp\": \"2024-01-01T10:00:00\"}"))),
        @ApiResponse(responseCode = "400", description = "Erro na atualiza√ß√£o em lote",
            content = @Content(mediaType = "application/json",
            examples = @ExampleObject(value = "{\"erro\": \"Falha parcial na atualiza√ß√£o dos pre√ßos\", \"timestamp\": \"2024-01-01T10:00:00\"}"))) 
    })
    @PostMapping("/atualizar-todos")
    @PreAuthorize("hasAuthority('ROLE_ADMIN')")
    public ResponseEntity<?> atualizarTodosPrecos() {
        try {
            cotacaoService.atualizarTodosPrecos();
            
            AtualizacaoTodosPrecoResponseDTO response = new AtualizacaoTodosPrecoResponseDTO(
                "Todos os pre√ßos foram atualizados", LocalDateTime.now());
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            ErrorResponseDTO errorResponse = new ErrorResponseDTO(e.getMessage(), LocalDateTime.now());
            
            return ResponseEntity.badRequest().body(errorResponse);
        }
    }
}